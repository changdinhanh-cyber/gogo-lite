<!DOCTYPE html>
<html lang="vi">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
<title>⚡️GoGo Lite Premium</title>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800;900&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer"/>
<style>
:root{
  --bg: linear-gradient(160deg,#212529 0%,#2c3243 42%,#343a40 72%,#495057 100%);
  --glass: rgba(255,255,255,.08);
  --radius: 18px;
  --brand: #ffd43b;
  --accent: #ff6b6b;
  --success: #51cf66;
  --info: #4dabf7;
  --warning: #ffd93d;
  --text: #f8f9fa;
  --blue: #4dabf7;
  --red: #fa5252;
}
*{box-sizing:border-box}
html,body{height:100%}
body{
  margin:0; font-family: Inter, sans-serif;
  background: var(--bg);
  display:flex; align-items:center; justify-content:center;
  animation: backgroundShift 20s ease infinite;
}
@keyframes backgroundShift {
    0% {background-position: 0% 50%;}
    50% {background-position: 100% 50%;}
    100% {background-position: 0% 50%;}
}
#app{
  width: 380px;
  height: 720px; border-radius: 26px; overflow:hidden; position:relative;
  box-shadow:0 20px 45px rgba(0,0,0,.5);
  display:flex; flex-direction:column;
  background: rgba(0,0,0,.6);
  color: var(--text);
}
/* ===== Header ===== */
.header{
  background: rgba(0,0,0,.5);
  backdrop-filter: blur(10px) saturate(140%);
  padding: 10px; position:relative; z-index:3;
  box-shadow: 0 6px 18px rgba(0,0,0,.25);
}
.brand{ display:flex; align-items:center; justify-content:space-between; gap:8px; }
.brand-title{
  font-weight:900; font-size:22px;
  background:linear-gradient(270deg,#fff,#ffe66d,#ff6b6b,#fff);
  background-size:600% 600%;
  -webkit-background-clip:text; -webkit-text-fill-color:transparent;
  animation: shift 7s ease infinite;
}
@keyframes shift{0%{background-position:0% 50%}50%{background-position:100% 50%}100%{background-position:0% 50%}}
.balance-chip{
  background: rgba(255,255,255,.1); padding:6px 12px; border-radius:999px; font-weight:800;
  display:flex; gap:6px; align-items:center; box-shadow:0 2px 6px rgba(0,0,0,.2);
}
.balance-chip i{color:#51cf66}

/* ===== Menu đã điều chỉnh ===== */
.main-menu{ 
  display:flex; 
  gap: 4px; 
  margin-top:8px;
  flex-wrap: nowrap;
  overflow-x: auto;
  padding-bottom: 5px;
}
.main-btn{
  flex:1; border:none; cursor:pointer; border-radius:14px; padding:8px 4px; 
  background: rgba(255,255,255,.1);
  backdrop-filter: blur(8px) saturate(140%);
  font-weight:700; display:flex; flex-direction: column;
  align-items:center;
  justify-content:center; gap:3px;
  transition:.15s; color: var(--text); 
  font-size:10px;
  min-width: 60px;
}
.main-btn:hover{ transform: translateY(-1px); background: rgba(255,255,255,.2); }
.main-btn.active{ background: var(--brand);
  box-shadow:0 6px 16px rgba(0,0,0,.3) }
.main-btn span {
    white-space: nowrap;
}
.main-btn .icon-wrapper {
  font-size: 18px;
  transition: transform 0.3s ease-in-out;
}
.main-btn:hover .icon-wrapper {
  animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  perspective: 1000px;
}
@keyframes shake {
  10%, 90% { transform: translate3d(-1px, 0, 0) rotate(-1deg);
  }
  20%, 80% { transform: translate3d(2px, 0, 0) rotate(2deg);
  }
  30%, 50%, 70% { transform: translate3d(-4px, 0, 0) rotate(-4deg);
  }
  40%, 60% { transform: translate3d(4px, 0, 0) rotate(4deg); }
}


/* ===== Sub Tabs ===== */
.subtabs{ display:flex; gap:8px; padding:8px;
  overflow-x:auto }
.subtab{
  border:none; padding:6px 14px; border-radius:999px; cursor:pointer; font-weight:700;
  background: rgba(255,255,255,.15);
  color: var(--text);
  white-space:nowrap;
}
.subtab.active{ background:var(--brand);
  color:#212529 }

/* ===== Content ===== */
.content{ flex:1; overflow:auto; padding:10px }
.section{
  background: rgba(255,255,255,.05);
  backdrop-filter: blur(10px) saturate(130%);
  border-radius: var(--radius); padding:12px;
  box-shadow: 0 8px 18px rgba(0,0,0,.3);
  animation: fadeIn .2s ease;
}
@keyframes fadeIn{from{opacity:0; transform:translateY(4px)} to{opacity:1; transform:none}}
.section + .section{ margin-top:12px }
.card{ background: rgba(255,255,255,.1);
  border-radius:14px; padding:12px; box-shadow:0 4px 12px rgba(0,0,0,.2); margin-top:8px }
.title{ font-weight:900; margin-bottom:8px; font-size:16px }

/* ===== Check-in grid ===== */
.week-grid{ display:grid; grid-template-columns: repeat(7,1fr);
  gap:6px }
.day{
  background: #343a40;
  color: var(--text);
  border-radius:12px; height:60px; display:flex; flex-direction:column;
  align-items:center; justify-content:center; font-weight:800; font-size:13px; cursor:pointer;
  box-shadow:0 2px 6px rgba(0,0,0,.15);
  transition:.15s;
}
.day:hover{ transform:translateY(-2px); background:#495057 }
.day.checked{ background:#51cf66; color:#fff }
.day i { font-size: 20px; }

/* ===== Shop ===== */
.shop-grid{ display:grid; grid-template-columns:1fr 1fr;
  gap:10px }
.item{ background:rgba(255,255,255,.1);
border-radius:12px; padding:10px; box-shadow:0 3px 8px rgba(0,0,0,.12) }
.item h4{ margin:0 0 6px;
  font-size:14px }
.item .price{ font-weight:800 }

/* ===== Table ===== */
.table{ width:100%; border-collapse:collapse; margin-top:8px; }
.table th, .table td{ padding:6px; border-bottom:1px solid rgba(255,255,255,.1);
  font-size:13px }
.table th{ background:var(--brand); color:#212529; text-align:left }

/* ===== Toast / Coin ===== */
.coin{ position:absolute; width:18px; height:18px; background:gold; border-radius:50%; top:-20px;
  animation:fall linear forwards }
@keyframes fall{ to{ transform:translateY(860px) rotate(360deg); opacity:0 } }
.overlay{ position:fixed; inset:0; background:rgba(0,0,0,.6); backdrop-filter:blur(5px); display:flex; align-items:center; justify-content:center;
  z-index:9 }
.toast{ width:86%; max-width:340px; background:linear-gradient(145deg,#495057,#343a40); border-radius:18px; padding:16px; text-align:center; box-shadow:0 14px 40px rgba(0,0,0,.5); color: var(--text); }
.toast h3{ margin:6px 0 4px;
  font-size:18px }
.toast p{ margin:0; opacity:.85; font-size:13px }

/* Helpers */
.muted{ opacity:.6 } .center{text-align:center} .mt8{margin-top:8px} .mt10{margin-top:10px}

/* ====== CSS phụ cho phần nâng cấp ====== */
.stats-grid{display:grid;grid-template-columns:1fr 1fr;gap:10px}
.stat{background:rgba(255,255,255,.1);border-radius:14px;padding:10px;box-shadow:0 3px 10px rgba(0,0,0,.2)}
.stat .big{font-weight:900;font-size:18px}
.progress{height:8px;background:rgba(255,255,255,.1);border-radius:999px;overflow:hidden}
.progress > div{height:100%;background:linear-gradient(90deg,#ffd43b,#ff6b6b);width:0%}
.row{display:flex;align-items:center;justify-content:space-between;gap:8px}
.chip{display:inline-flex;align-items:center;gap:6px;background:rgba(255,255,255,.1);border-radius:999px;padding:6px 10px;font-weight:700;box-shadow:0 3px 8px rgba(0,0,0,.2)}
.btn{border:none;border-radius:12px;padding:8px 10px;font-weight:800;cursor:pointer;background:#ffd43b}
.btn.secondary{background:rgba(255,255,255,.1)}
.modal{width:90%;max-width:360px;background:linear-gradient(145deg,#495057,#343a40);border-radius:16px;box-shadow:0 20px 50px rgba(0,0,0,.5);padding:14px;
  color: var(--text)}
.friend{display:flex;align-items:center;gap:10px;background:rgba(255,255,255,.1);border-radius:12px;padding:10px;box-shadow:0 2px 8px rgba(0,0,0,.2)}
.avatar{width:38px;height:38px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-size:20px;background:var(--brand)}
.spin-wheel{width:240px;height:240px;border-radius:50%;margin:12px auto;border:10px solid var(--text);
  background: conic-gradient(#ffd43b 0 60deg,#74c0fc 60deg 120deg,#ff6b6b 120deg 180deg,#51cf66 180deg 240deg,#f783ac 240deg 300deg,#ffe066 300deg 360deg);position:relative}
.spin-pointer{position:absolute;left:50%;top:-18px;transform:translateX(-50%);width:0;height:0;border-left:16px solid transparent;border-right:16px solid transparent;border-bottom:26px solid #e03131}

/* New CSS for running text */
.running-text-container {
    overflow: hidden;
    white-space: nowrap;
    position: relative;
    padding: 4px 0;
    font-size: 11px;
    opacity: 0.8;
}
.running-text {
    display: inline-block;
    padding-left: 100%;
    animation: marquee 20s linear infinite;
    animation-delay: -5s; /* Start in the middle */
}
@keyframes marquee {
    0%   { transform: translate(0, 0);
    }
    100% { transform: translate(-100%, 0); }
}
/* New CSS for withdraw notification */
.withdraw-alert {
    position: fixed;
    bottom: 0;
    left: 100%;
    transform: translateX(0);
    background: #495057;
    color: #fff;
    padding: 8px 16px;
    border-radius: 999px;
    font-size: 13px;
    font-weight: 600;
    box-shadow: 0 4px 12px rgba(0,0,0,.2);
    z-index: 10;
    animation: slideAcross 10s linear forwards;
}
@keyframes slideAcross {
    0% { left: 100%; }
    100% { left: -100%;
    }
}
/* New CSS for sponsor logos */
.sponsor-logos {
    display: flex;
    justify-content: space-around;
    align-items: center;
    gap: 10px;
    margin-top: 10px;
}
.sponsor-logos .sponsor-icon {
    width: 60px;
    height: 60px;
    border-radius: 12px;
    box-shadow: 0 4px 10px rgba(0,0,0,.1);
    background: rgba(255,255,255,.1);
    padding: 5px;
    object-fit: contain;
    font-size: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
}
.footer-logos {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 10px;
  background: rgba(0,0,0,.5);
  border-top-left-radius: 18px;
  border-top-right-radius: 18px;
}
.footer-logos .gogo-logo {
  font-weight: 800;
  font-size: 16px;
  display: flex;
  align-items: center;
  gap: 4px;
  animation: shake 2s ease-in-out infinite;
}
@keyframes shake {
    0%, 100% { transform: translateX(0);
    }
    10%, 30%, 50%, 70%, 90% { transform: translateX(-2px);
    }
    20%, 40%, 60%, 80% { transform: translateX(2px); }
}
.withdraw-btn {
  background: #dc3545;
  color: #fff;
  font-weight: bold;
  font-size: 16px;
  padding: 12px 20px;
  border-radius: 12px;
  width: 100%;
  border: none;
  cursor: pointer;
  box-shadow: 0 4px 12px rgba(220, 53, 69, 0.4);
  transition: all 0.3s ease;
}
.withdraw-btn:hover {
  background: #c82333;
  transform: translateY(-2px);
  box-shadow: 0 6px 16px rgba(220, 53, 69, 0.6);
}
.deposit-btn {
  background: #28a745;
  color: #fff;
  font-weight: bold;
  padding: 12px 20px;
  border-radius: 12px;
  width: 100%;
  border: none;
  cursor: pointer;
  margin-top: 10px;
}
.bank-info {
  display: flex;
  align-items: center;
  gap: 10px;
  }
.bank-logo {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: rgba(255,255,255,.15);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  }
input[type="number"] {
  font-size: 16px;
  background-color: rgba(255,255,255,.1);
  border: none;
  color: var(--text);
  border-radius: 8px;
}
.action-btn-quest {
    background: #ffd43b;
    color: #212529;
    font-weight: bold;
    border: none;
    border-radius: 8px;
    padding: 6px 12px;
    cursor: pointer;
    transition: 0.2s;
    }
.action-btn-quest:hover {
    background: #ffc107;
}

/* CSS cho trò chơi Xanh Đỏ */
.game-container { text-align: center;
  }
.timer-display { font-size: 48px; font-weight: 900; }
.bet-options { display: flex; justify-content: space-around; margin: 15px 0; }
.bet-btn { padding: 12px 24px;
  font-size: 16px; font-weight: 800; color: #fff; border: none; border-radius: 12px; cursor: pointer; }
.bet-btn.blue { background-color: var(--blue); }
.bet-btn.red { background-color: var(--red);
  }
.bet-input-wrapper { margin: 10px 0; }
.result-history { display: flex; flex-wrap: wrap; justify-content: center; gap: 5px; margin-top: 10px;
  }
.result-item { width: 24px; height: 24px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; font-size: 12px; color: #fff; font-weight: bold;
  }
.result-item.blue { background-color: var(--blue); }
.result-item.red { background-color: var(--red); }

/* CSS cho trò chơi XO */
.xo-board {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  width: 240px;
  height: 240px;
  margin: 10px auto;
  background: #343a40;
  border-radius: 10px;
  overflow: hidden;
  gap: 4px;
  padding: 4px;
  }
.xo-cell {
  background: #495057;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 48px;
  font-weight: 900;
  color: #fff;
  cursor: pointer;
  transition: 0.2s;
}
.xo-cell:hover {
  background: #6c757d;
}
.xo-cell.X { color: var(--blue); }
.xo-cell.O { color: var(--red); }

.contact-info {
  font-size: 12px;
  opacity: 0.8;
}
.active-users {
  text-align: center;
  font-weight: bold;
  font-size: 14px;
  margin-top: 10px;
}
.running-withdraw-alert {
  position: absolute;
  bottom: 0;
  left: 100%;
  transform: translateX(0);
  background: #495057;
  color: #fff;
  padding: 8px 16px;
  border-radius: 999px;
  font-size: 13px;
  font-weight: 600;
  box-shadow: 0 4px 12px rgba(0,0,0,.2);
  z-index: 10;
  animation: slideAcross 10s linear forwards;
  }
@keyframes slideAcross {
    0% { left: 100%; }
    100% { left: -100%;
    }
}

/* ===== MODIFIED CHATBOT CSS ===== */
.chat-bubble {
  position: fixed;
  bottom: 20px;
  left: 20px;
  /* Move to the left */
  z-index: 1000;
  cursor: grab;
}
.chat-bubble.dragging {
  cursor: grabbing;
  }
.chat-btn {
  background: #8fbc8f; /* Lighter green color */
  color: #212529;
  border: none;
  padding: 6px 10px;
  border-radius: 12px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  transition: transform 0.2s;
  font-size: 10px;
  font-weight: 600;
  text-align: center;
  width: 40px;
  height: 40px;
  line-height: 1;
}
.chat-btn:hover {
  transform: scale(1.05);
  }
.chat-btn i {
  font-size: 20px;
  margin-bottom: 0;
}
.chat-window {
  position: fixed;
  bottom: 80px;
  left: 20px;
  /* Move to the left */
  width: 320px;
  height: 400px;
  background: #212529;
  border-radius: 18px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  transform: scale(0);
  transform-origin: bottom left;
  /* Adjust origin */
  transition: transform 0.3s cubic-bezier(0.18, 0.89, 0.32, 1.28);
}
.chat-window.open {
  transform: scale(1);
  }
.chat-header {
  background: #2c3243;
  color: #fff;
  padding: 12px;
  font-weight: bold;
  text-align: center;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}
.chat-header .close-chat {
  background: none;
  border: none;
  color: #fff;
  font-size: 20px;
  cursor: pointer;
}
.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 12px;
  display: flex;
  flex-direction: column;
  gap: 8px;
  }
.chat-input {
  display: flex;
  padding: 8px;
  background: #343a40;
}
.chat-input input {
  flex: 1;
  border: none;
  background: #495057;
  color: var(--text);
  padding: 8px 12px;
  border-radius: 999px;
}
.chat-input button {
  background: var(--brand);
  border: none;
  color: #212529;
  padding: 0 16px;
  margin-left: 8px;
  border-radius: 999px;
  font-weight: 700;
  cursor: pointer;
}
.message {
  padding: 8px 12px;
  border-radius: 14px;
  max-width: 80%;
  }
.message.bot {
  background: #343a40;
  align-self: flex-start;
}
.message.user {
  background: #4dabf7;
  align-self: flex-end;
  }

/* ===== CRYPTO CSS ===== */
.crypto-chart {
  background: #2c3243;
  border-radius: 12px;
  padding: 12px;
  height: 200px;
  position: relative;
  overflow: hidden;
  }
.chart-price {
  font-size: 32px;
  font-weight: 900;
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  }
.price-up { color: #51cf66; }
.price-down { color: #ff6b6b; }
.crypto-actions {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 10px;
  }
.crypto-actions .btn {
  width: 100%;
}
.buy-btn { background: #51cf66; color: #212529; }
.sell-btn { background: #ff6b6b; color: #212529;
  }
/* NEW CSS for pending deposit */
.pending-deposit-alert {
  background: rgba(255, 255, 255, 0.1);
  padding: 8px;
  border-radius: 8px;
  margin-top: 8px;
  font-size: 13px;
  display: flex;
  align-items: center;
  gap: 8px;
  animation: pulse 1.5s infinite;
  }
@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(255, 212, 59, 0.4);
    }
    70% {
        box-shadow: 0 0 0 10px rgba(255, 212, 59, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(255, 212, 59, 0);
    }
}


</style>
</head>
<body>
<div id="app">
  <div class="header">
    <div class="brand">
      <div class="brand-title">🚀 GoGo Lite Premium</div>
      <div class="balance-chip" title="Số dư hiện tại">
        <i class="fa-solid fa-coins"></i>
        <span id="balanceText">—</span>
      </div>
    </div>
    <div class="main-menu" id="mainMenu"></div>
  </div>
  <div class="running-text-container">
    <div class="running-text">Chào mừng bạn đến với GoGo Lite Premium!
 Chúc bạn có một ngày kiếm tiền vui vẻ! ✨</div>
  </div>
  <div class="subtabs" id="subTabs"></div>
  <div class="content" id="content"></div>
  <div class="running-withdraw-alert">
    <div class="running-withdraw-text" id="withdrawAlertText"></div>
  </div>
  <div class="footer-logos">
    <div class="gogo-logo">
      GGL <i class="fa-solid fa-sack-dollar"></i>
    </div>
  </div>
</div>

<div class="chat-bubble">
  <button class="chat-btn" id="chatButton">
    <i class="fa-solid fa-comments"></i>
    <span>GGL Chat</span>
  </button>
  <div class="chat-window" id="chatWindow">
    <div class="chat-header">
      <span>GGL Chat</span>
      <button class="close-chat" id="closeChat">&times;</button>
    </div>
 
    <div class="chat-messages" id="chatMessages"></div>
    <div class="chat-input">
      <input type="text" id="chatInput" placeholder="Nhập tin nhắn..." />
      <button id="sendChat">Gửi</button>
    </div>
  </div>
</div>

<script>
/********************
 * State & Utilities *
 ********************/
const $ = s => document.querySelector(s);
 const $$ = s => document.querySelectorAll(s);
const fmt = n => (n||0).toLocaleString('vi-VN');
 const LS = {
  balance: 'gogo.balance',
  tx: 'gogo.transactions',
  withdraw: 'gogo.withdraws',
  user: 'gogo.user',
  inventory: 'gogo.inventory',
  codes: 'gogo.codes',
  checkin: 'gogo.checkin',
  quests: 'gogo.quests',
  bank: 'gogo.bank',
  blueRed: 'gogo.blueRed',
  xo: 'gogo.xo',
  crypto: 'gogo.crypto', // NEW: crypto state
  pendingDeposit: 'gogo.pendingDeposit' // NEW: pending deposit
};
 // init state
let balance = parseInt(localStorage.getItem(LS.balance) || '0', 10);
let transactions = JSON.parse(localStorage.getItem(LS.tx) || '[]');
 let withdrawHistory = JSON.parse(localStorage.getItem(LS.withdraw) || '[]');
let user = JSON.parse(localStorage.getItem(LS.user) || '{"name":"Khách","exp":0,"avatar":"🟡"}');
let inventory = JSON.parse(localStorage.getItem(LS.inventory) || '[]');
 let codes = JSON.parse(localStorage.getItem(LS.codes) || '{}');
let checkin = JSON.parse(localStorage.getItem(LS.checkin) || '{}');
let quests = JSON.parse(localStorage.getItem(LS.quests) || '{}');
 let linkedBank = JSON.parse(localStorage.getItem(LS.bank) || 'null');
let blueRed = JSON.parse(localStorage.getItem(LS.blueRed) || '{"history":[], "bet":0, "side": null}');
 let xoState = JSON.parse(localStorage.getItem(LS.xo) || '{"wins":0, "losses":0, "draws":0}');
let cryptoState = JSON.parse(localStorage.getItem(LS.crypto) || '{"coinBalance": 0, "investedVND": 0}');
 // NEW: crypto state
  let pendingDeposit = load(LS.pendingDeposit) || null;
 // NEW: init pending deposit state

function save(k,v){ localStorage.setItem(k, typeof v==='string'? v : JSON.stringify(v)); }
function load(k){ try { return JSON.parse(localStorage.getItem(k));
 } catch { return null; }}
function saveAll(){
  save(LS.balance, String(balance));
  save(LS.tx, transactions);
  save(LS.withdraw, withdrawHistory);
  save(LS.user, user);
  save(LS.inventory, inventory);
  save(LS.codes, codes);
  save(LS.checkin, checkin);
  save(LS.quests, quests);
  save(LS.bank, linkedBank);
  save(LS.blueRed, blueRed);
  save(LS.xo, xoState);
  save(LS.crypto, cryptoState);
  // NEW: save crypto state
  save(LS.pendingDeposit, pendingDeposit);
 // NEW: save pending deposit state
}

function nowVN(){ return new Date().toLocaleString('vi-VN'); }
function todayKey(){ const d=new Date(); return d.toISOString().slice(0,10);
  }
function weekKey(){
  const d = new Date();
  const date = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
  date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay()||7));
 const yearStart = new Date(Date.UTC(date.getUTCFullYear(),0,1));
  const weekNo = Math.ceil((((date - yearStart) / 86400000) + 1)/7);
  return `${date.getUTCFullYear()}-W${weekNo}`;
  }

function ensureCheckinWeek(){
  const wk = weekKey();
  if(!checkin.weekKey || checkin.weekKey !== wk){
    checkin = { weekKey: wk, days: [], bonusClaimedWeeks: (checkin.bonusClaimedWeeks||[]) };
  save(LS.checkin, checkin);
  }
}

function level(){ return Math.floor((user.exp||0)/1000) + 1; }
function addExp(x){ user.exp = (user.exp||0) + x; save(LS.user, user); renderHeader();
  }

// balance & effects
function updateBalance(amount, reason){
  const newBal = balance + amount;
  if(newBal < 0) return false;
  balance = newBal;
  transactions.unshift({ time: nowVN(), amount, reason });
  if(transactions.length>200) transactions.pop();
  saveAll();
  renderHeader();
  popMoney(`${amount>0?'+':''}${fmt(amount)} VNĐ\n${reason||''}`);
  return true;
  }

function popMoney(message){
  for(let i=0;i<10;i++){
    const coin=document.createElement('div');
    coin.className='coin';
    coin.style.left=(Math.random()*340+10)+'px';
    coin.style.animationDuration=(Math.random()*1.2+1.4)+'s';
    document.body.appendChild(coin);
    setTimeout(()=>coin.remove(), 2400);
  }
  showToast('Thành công', message, 'success');
}

function showToast(title, desc, type='info'){
  const overlay=document.createElement('div'); overlay.className='overlay';
  const box=document.createElement('div'); box.className='toast';
  const icon = type==='success'? '💸' : type==='error'? '❌' : 'ℹ️';
  box.innerHTML = `<div style="font-size:40px">${icon}</div>
    <h3>${title}</h3><p>${desc||''}</p>
    <div style="margin-top:10px"><button onclick="this.closest('.overlay').remove()">Đóng</button></div>`;
  overlay.appendChild(box); document.body.appendChild(overlay);
  setTimeout(()=>{ if(document.body.contains(overlay)) overlay.remove(); }, 2600);
}

// Function to show withdraw alert
function showWithdrawAlert(user, amount) {
  const alertText = `🎉 ${user} vừa rút ${fmt(amount)} VNĐ!`;
  const alertElement = document.createElement('div');
  alertElement.className = 'running-withdraw-text';
  alertElement.textContent = alertText;

  const container = $('.running-withdraw-alert');
  if (container) {
    container.innerHTML = ''; // Clear previous alerts
    container.appendChild(alertElement);
  }
}

/****************
 * Menu / Tabs  *
 ****************/
const MAIN = {
  home:   { label:'Trang chủ', emoji:'🏠', subtabs:['Tổng quan'] },
  checkin:{ label:'Điểm danh', emoji:'🗓️', subtabs:['Điểm danh tuần','Bonus tuần'] },
  quests: { label:'Nhiệm vụ', emoji:'🎯', subtabs:['Daily','Weekly'] },
  game: { label:'Mini game', emoji:'🎮', subtabs:['Vòng quay','Hộp quà','Xanh Đỏ','XO'] },
  crypto: { label:'Crypto', emoji: '🚀', subtabs:['Giao dịch'] }, // NEW: crypto menu
  shop:   { label:'Shop', emoji:'🛍️', subtabs:['Cửa hàng','Kho đồ'] },
  wallet: { label:'Ví & Lịch sử', emoji:'💰', subtabs:['Số dư','Giao dịch','Lịch sử rút', 'Nạp tiền'] },
  community: { label:'Cộng đồng', emoji:'👥', subtabs:['Bạn bè'] },
 
  profile:{ label:'Cá nhân', emoji:'🧑‍💻', subtabs:['Hồ sơ','Nhập mã','BXH'] },
};


let currentMain = 'home';
let currentSubIndex = 0;
 function renderHeader(){
  $('#balanceText').textContent = fmt(balance) + ' VNĐ';
}

function renderMainMenu(){
  const mm = $('#mainMenu'); mm.innerHTML='';
  Object.entries(MAIN).forEach(([key, cfg])=>{
    const b=document.createElement('button'); b.className='main-btn'+(key===currentMain?' active':'');
    b.innerHTML = `<span class="icon-wrapper">${cfg.emoji}</span><span>${cfg.label}</span>`;
    b.onclick=()=>{ currentMain = key; currentSubIndex = 0; renderSubTabs(); renderContent(); };
    mm.appendChild(b);
  });
  }

function renderSubTabs(){
  const st = $('#subTabs'); st.innerHTML='';
  MAIN[currentMain].subtabs.forEach((name, i)=>{
    const b=document.createElement('button'); b.className='subtab'+(i===currentSubIndex?' active':''); b.textContent=name;
    b.onclick=()=>{ currentSubIndex=i; renderContent(); };
    st.appendChild(b);
  });
  }

/****************
 * Renderers     *
 ********************/
function renderContent(){
  const c = $('#content'); c.innerHTML='';
  const sub = MAIN[currentMain].subtabs[currentSubIndex];
  if(currentMain==='home'){
    if(sub === 'Tổng quan') {
      renderHome(c);
  }
  }
  else if(currentMain==='checkin'){
    if(sub==='Điểm danh tuần') {
      renderCheckinWeek(c);
  }
    if(sub==='Bonus tuần') {
      renderCheckinBonus(c);
  }
  }
  else if(currentMain==='quests'){
    if(sub==='Daily') {
      renderQuestDaily(c);
  }
    if(sub==='Weekly') {
      renderQuestWeekly(c);
  }
  }
  else if(currentMain==='game'){
    if(sub==='Vòng quay') {
      renderSpin(c);
  }
    if(sub==='Hộp quà') {
      renderLuckyBox(c);
  }
    if(sub==='Xanh Đỏ') {
      renderBlueRedGame(c);
  }
    if(sub==='XO') {
      renderXO(c);
  }
  }
  else if(currentMain==='crypto'){ // NEW: crypto render function
    if(sub==='Giao dịch') {
      renderCrypto(c);
  }
  }
  else if(currentMain==='shop'){
    if(sub==='Cửa hàng') {
      renderShop(c);
  }
    if(sub==='Kho đồ') {
      renderInventory(c);
  }
  }
  else if(currentMain==='wallet'){
    if(sub==='Số dư') {
      renderWallet(c);
  }
    if(sub==='Giao dịch') {
      renderTx(c);
  }
    if(sub==='Lịch sử rút') {
      renderWithdrawHistory(c);
  }
    if(sub==='Nạp tiền') {
      renderDeposit(c);
  }
  }
  else if(currentMain==='community'){
    if(sub==='Bạn bè') {
      renderFriends(c);
  }
  }
  else if(currentMain==='profile'){
    if(sub==='Hồ sơ') {
      renderProfile(c);
  }
    if(sub==='Nhập mã') {
      renderRedeem(c);
  }
    if(sub==='BXH') {
      renderLeaderboard(c);
  }
  }
  
  const contactInfo = document.createElement('div');
  contactInfo.className = 'section contact-info';
  contactInfo.innerHTML = `
      <div class="title">📞 Liên hệ</div>
      <p>Hỗ trợ: ********** (Zalo)</p>
      <p>Email: **gogo@support.com**</p>
  `;
  c.appendChild(contactInfo);
  
  const activeUsers = document.createElement('div');
  activeUsers.className = 'section active-users';
  activeUsers.innerHTML = `<i class="fa-solid fa-user-group"></i> <span id="activeUserCount">0</span> người đang hoạt động`;
  c.appendChild(activeUsers);
  
  let userCount = 35000;
  function updateActiveUsers() {
      const randomChange = Math.floor(Math.random() * 50) - 25;
  userCount += randomChange;
      const activeUserCountEl = $('#activeUserCount');
      if (activeUserCountEl) {
          activeUserCountEl.textContent = fmt(userCount);
  }
  }
  updateActiveUsers(); // Initial update
  setInterval(updateActiveUsers, 5000);
  // Update every 5 seconds
}

// Function to calculate VIP level based on deposit amount
function calculateVipLevel() {
    const totalDeposit = transactions
        .filter(tx => tx.reason.includes('Nạp tiền'))
        .reduce((sum, tx) => sum + Math.abs(tx.amount), 0);
 // Define VIP level thresholds
    const vipThresholds = [
        100000, 500000, 1000000, 2000000, 5000000,
        10000000, 20000000, 50000000, 100000000
    ];
 let currentVip = 0;
    let nextVipThreshold = vipThresholds[0];
    let nextVip = 1;
 for (let i = 0; i < vipThresholds.length; i++) {
        if (totalDeposit >= vipThresholds[i]) {
            currentVip = i + 1;
  if (i < vipThresholds.length - 1) {
                nextVip = i + 2;
  nextVipThreshold = vipThresholds[i + 1];
            } else {
                nextVip = 9;
  // Already at max VIP
                nextVipThreshold = totalDeposit;
  }
        }
    }

    return { totalDeposit, currentVip, nextVip, nextVipThreshold };
  }


function renderHome(c){
  // Create a main container for the home content to avoid rendering issues
  const homeContainer = document.createElement('div');
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML=`
    <div class="title">✨ Tổng quan</div>
    <div class="card">
      <div><b>Avatar:</b> <span style="font-size:22px">${user.avatar||'🟡'}</span></div>
      <div class="mt8"><b>Tên:</b> ${user.name||'Khách'} &nbsp;
  <span class="muted">Lvl ${level()}</span></div>
      <div class="mt8"><b>EXP:</b> ${fmt(user.exp||0)}</div>
      <div class="mt8"><b>Tuần hiện tại:</b> ${weekKey()}</div>
    </div>
  `;
  homeContainer.appendChild(sec);

  // VIP Section
  const { totalDeposit, currentVip, nextVip, nextVipThreshold } = calculateVipLevel();
  const vipSec = document.createElement('div');
  vipSec.className = 'section';
  vipSec.innerHTML = `<div class="title">⭐ Cấp VIP</div>`;
  const vipCard = document.createElement('div');
  vipCard.className = 'card';
  if (currentVip === 9) {
    vipCard.innerHTML = `
      <div class="center">
        <div style="font-size: 24px; font-weight: bold;">VIP 9</div>
        <div class="muted">Bạn đã đạt cấp VIP cao nhất!</div>
        <div class="mt8">Tổng nạp: ${fmt(totalDeposit)} VNĐ</div>
      </div>
    `;
  } else {
    const progress = (totalDeposit / nextVipThreshold) * 100;
  vipCard.innerHTML = `
      <div class="row">
        <div>Cấp VIP hiện tại: <b>VIP ${currentVip}</b></div>
        <div style="font-size: 14px;">Next: <b>VIP ${nextVip}</b></div>
      </div>
      <div class="progress mt8"><div style="width:${Math.min(progress, 100)}%"></div></div>
      <div class="muted mt8">${fmt(totalDeposit)} / ${fmt(nextVipThreshold)} VNĐ</div>
    `;
  }
  vipSec.appendChild(vipCard);
  homeContainer.appendChild(vipSec);

  const bankSec = document.createElement('div');
  bankSec.className = 'section';
  bankSec.innerHTML = `<div class="title">🏦 Ví & Ngân hàng</div>`;
  const card = document.createElement('div');
  card.className = 'card';
  if (linkedBank) {
    card.innerHTML = `
      <div class="row"><div><b>${linkedBank.logo} ${linkedBank.name}</b></div>
      <button class="btn secondary" id="chgBank">Đổi</button></div>
      <div class="big mt8">${fmt(balance)} VNĐ</div>`;
  } else {
    card.innerHTML = `
      <div class="muted">Chưa liên kết ngân hàng</div>
      <button class="btn mt10" id="lnkBank">Liên kết ngay</button>`;
  }
  bankSec.appendChild(card);
  homeContainer.appendChild(bankSec);

  const btn = card.querySelector('#lnkBank') || card.querySelector('#chgBank');
  if (btn) btn.onclick = showBankLink;
  const { videos, checkins, vPct, cPct } = weeklyProgress();
  const top = document.createElement('div');
  top.className = 'section';
  top.innerHTML = `
    <div class="row">
      <div class="chip">🧑‍💻 ${user.name ||
  'Khách'}</div>
      <div class="chip">🌟 Lvl ${level()}</div>
      <div class="chip">✨ EXP ${fmt(user.exp || 0)}</div>
    </div>`;
  homeContainer.appendChild(top);

  const stats = document.createElement('div');
  stats.className = 'section';
  stats.innerHTML = `<div class="title">📊 Thống kê nhanh</div>
    <div class="stats-grid">
      <div class="stat">
        <div>🎬 Video tuần</div>
        <div class="big">${videos}/10</div>
        <div class="progress mt8"><div style="width:${vPct}%"></div></div>
 
      </div>
      <div class="stat">
        <div>📅 Điểm danh</div>
        <div class="big">${checkins}/7</div>
        <div class="progress mt8"><div 
  style="width:${cPct}%"></div></div>
 
      </div>
    </div>
    <div class="row mt10">
      <button class="btn" id="gotoDaily">⚡️ Làm nhiệm vụ</button>
      <button class="btn secondary" id="gotoCheckin">🗓️ Điểm danh</button>
      <button class="btn secondary" id="gotoShop">🛍️ Shop</button>
    </div>`;
  homeContainer.appendChild(stats);
  stats.querySelector('#gotoDaily').onclick = () => { currentMain = 'quests'; currentSubIndex = 0; renderSubTabs(); renderContent(); };
  stats.querySelector('#gotoCheckin').onclick = () => { currentMain = 'checkin'; currentSubIndex = 0; renderSubTabs(); renderContent(); };
  stats.querySelector('#gotoShop').onclick = () => { currentMain = 'shop'; currentSubIndex = 0; renderSubTabs(); renderContent(); };

  const news = document.createElement('div');
  news.className = 'section';
  news.innerHTML = `<div class="title">📰 Bảng tin</div>
    <div class="card"><b>🔥 Sự kiện tuần:</b> Hoàn thành 10 video + 7 ngày điểm danh → Thưởng <b>300,000 VNĐ</b>.</div>
    <div class="card mt8"><b>🎁 Mã thưởng:</b> Dùng <code>EVENT2025</code> để nhận <b>25,000 VNĐ</b>.</div>`;
  homeContainer.appendChild(news);

  const sponsors = document.createElement('div');
  sponsors.className = 'section';
  sponsors.innerHTML = `
    <div class="title">🏆 Đối tác chiến lược</div>
    <div class="sponsor-logos">
      <div class="sponsor-icon">🏦</div>
      <div class="sponsor-icon">💳</div>
      <div class="sponsor-icon">💰</div>
      <div class="sponsor-icon">🌐</div>
    </div>`;
  homeContainer.appendChild(sponsors);

  c.appendChild(homeContainer);
}

// Function to calculate VIP level based on deposit amount
function calculateVipLevel() {
    const totalDeposit = transactions
        .filter(tx => tx.reason.includes('Nạp tiền'))
        .reduce((sum, tx) => sum + Math.abs(tx.amount), 0);
 // Define VIP level thresholds
    const vipThresholds = [
        100000, 500000, 1000000, 2000000, 5000000,
        10000000, 20000000, 50000000, 100000000
    ];
 let currentVip = 0;
    let nextVipThreshold = vipThresholds[0];
    let nextVip = 1;
 for (let i = 0; i < vipThresholds.length; i++) {
        if (totalDeposit >= vipThresholds[i]) {
            currentVip = i + 1;
  if (i < vipThresholds.length - 1) {
                nextVip = i + 2;
  nextVipThreshold = vipThresholds[i + 1];
            } else {
                nextVip = 9;
  // Already at max VIP
                nextVipThreshold = totalDeposit;
  }
        }
    }

    return { totalDeposit, currentVip, nextVip, nextVipThreshold };
  }


// Hàm mới để tính thưởng điểm danh dựa trên cấp VIP
function getDailyCheckinReward() {
    const { currentVip } = calculateVipLevel();
 // Lấy mức thưởng mới
    const rewards = [5000, 10000, 15000, 20000, 25000, 30000, 35000, 45000, 55000, 55000];
  return rewards[Math.min(currentVip, rewards.length - 1)];
}

function renderCheckinWeek(c){
  ensureCheckinWeek();
  const weekDays=['T2','T3','T4','T5','T6','T7','CN'];
  const dailyReward = getDailyCheckinReward();
 // Lấy mức thưởng mới
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML = `<div class="title">📅 Điểm danh theo tuần (+${fmt(dailyReward)}/ngày)</div>`;
  const grid=document.createElement('div');
  grid.className='week-grid mt10';
  for(let i=1;i<=7;i++){
    const d=document.createElement('div');
    const today = new Date().getDay() + 1;
 // 1-7
    const isToday = (i === today);
    const isChecked = checkin.days.includes(i);
  d.className = 'day' + (isChecked ? ' checked' : '') + (isToday ? ' active-day' : '');
  d.innerHTML = `<i class="fa-solid fa-sack-dollar"></i><small>${weekDays[(i-1)%7]}</small>`;
    d.onclick=()=>{
      if(isChecked) {
        showToast("Thông báo", "Ngày này bạn đã điểm danh rồi.", "info");
  return;
      }
      if(!isToday) {
        showToast("Thông báo", "Bạn chỉ có thể điểm danh cho ngày hôm nay.", "info");
  return;
      }
      if(updateBalance(dailyReward, `Điểm danh ngày ${i}`)) { 
        checkin.days.push(i);
  save(LS.checkin, checkin);
        addExp(50); 
        const q = ensureQuestToday();
        q.checkinToday = true;
        save(LS.quests, quests);
        renderContent();
      }
    };
    grid.appendChild(d);
  }
  sec.appendChild(grid);

  const noteCard = document.createElement('div');
  noteCard.className = 'card mt10';
  noteCard.innerHTML = `
    <div style="font-weight: bold;">Lưu ý khi điểm danh:</div>
    <ul>
        <li>Nên điểm danh vào **buổi sáng sớm** để nhận được may mắn.</li>
        <li>**Tuyệt đối không** sử dụng phần mềm giả lập, hack hoặc cheat.</li>
        <li>Chỉ điểm danh **một lần duy nhất** trong ngày.</li>
    </ul>`;
  sec.appendChild(noteCard);

  const scheduleCard = document.createElement('div');
  scheduleCard.className = 'card mt10';
  scheduleCard.innerHTML = `
    <div style="font-weight: bold;">Lịch trình hôm nay:</div>
    <ul>
        <li>**08:00 - 10:00:** Điểm danh để nhận thêm 20 EXP.</li>
        <li>**12:00 - 14:00:** Hoàn thành nhiệm vụ video để nhận thêm 10 EXP.</li>
        <li>**18:00 - 20:00:** Tham gia mini game Vòng quay may mắn.</li>
    </ul>`;
  sec.appendChild(scheduleCard);

  c.appendChild(sec);
}


function renderCheckinBonus(c){
  ensureCheckinWeek();
  const done7 = checkin.days && checkin.days.length >= 7;
  const already = (checkin.bonusClaimedWeeks || []).includes(checkin.weekKey);
  const sec = document.createElement('div'); 
  sec.className = 'section';
  sec.innerHTML = `<div class="title">🎁 Thưởng tuần (+200,000 VNĐ)</div>`;

  const card = document.createElement('div');
  card.className = 'card mt8';
  
  if (done7) {
    card.innerHTML = `<div class="center" style="font-weight: bold;">Bạn đã đủ điều kiện nhận thưởng tuần!</div>`;
  } else {
    card.innerHTML = `<div class="center muted">Hoàn thành đủ 7 ngày điểm danh trong tuần để nhận thưởng.</div>`;
  }

  const btn = document.createElement('button');
  btn.className = 'btn mt10';
  btn.style.width = '100%';
  btn.textContent = 'Nhận Bonus +200,000 VNĐ';
  btn.disabled = !done7 || already;
  
  btn.onclick = () => {
    if(done7 && !already){
      checkin.bonusClaimedWeeks.push(checkin.weekKey);
  save(LS.checkin, checkin);
      if(updateBalance(200000,'Bonus tuần')){ 
        addExp(120); 
        renderContent();
  }
    }
  };

  sec.appendChild(card);
  sec.appendChild(btn); 
  c.appendChild(sec);
}

function ensureQuestToday(){
  const key=todayKey();
  if(!quests[key]) quests[key]={
    video:0,
    claimVideo:false,
    share:false,
    claimShare:false,
    invite:false,
    claimInvite:false,
    checkinToday: false,
    spinToday: false
  };
  return quests[key];
}

function renderQuestDaily(c){
  const q=ensureQuestToday();
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML=`<div class="title">📝 Nhiệm vụ ngày</div>`;

  const notesCard = document.createElement('div');
  notesCard.className = 'card mt8';
  notesCard.innerHTML = `
      <div style="font-weight: bold;">Lưu ý khi làm nhiệm vụ:</div>
      <ul>
          <li>Mỗi nhiệm vụ chỉ có thể làm **một lần duy nhất** mỗi ngày.</li>
          <li>Bạn phải hoàn thành nhiệm vụ để có thể nhận thưởng.</li>
          <li>Thưởng sẽ được cộng thẳng vào số dư của bạn.</li>
      </ul>
  `;
  sec.appendChild(notesCard);

  // Quest 1: Xem video
  const card1=document.createElement('div'); card1.className='card mt10';
  card1.innerHTML=`
    <div class="row">
        <div><b>Xem video:</b> ${q.video}/3</div>
        <button class="action-btn-quest" id="doVideo">Làm</button>
    </div>`;
  const btn1=card1.querySelector('#doVideo');
  btn1.disabled = q.claimVideo;
  btn1.onclick=()=>{
    if(q.video>=3 && !q.claimVideo) {
      if(updateBalance(50000, 'Hoàn thành nhiệm vụ video')){
        q.claimVideo=true;
  addExp(40); save(LS.quests,quests); renderContent();
      }
      return;
    }
    btn1.disabled=true; let t=15;
  const iv=setInterval(()=>{
      t--; btn1.textContent=`Đang xem ${t}s`;
      if(t<=0){ clearInterval(iv); q.video++; save(LS.quests,quests); renderContent(); }
    },1000);
  };
  sec.appendChild(card1);

  // Quest 2: Chia sẻ ứng dụng
  const card2=document.createElement('div'); card2.className='card mt10';
  card2.innerHTML = `
    <div class="row">
        <div><b>Chia sẻ ứng dụng:</b> ${q.share ?
  'Hoàn thành' : 'Chưa'}</div>
        <button class="action-btn-quest" id="doShare">Làm</button>
    </div>`;
  const btn2 = card2.querySelector('#doShare');
  btn2.disabled = q.claimShare;
  btn2.onclick = () => {
    if(!q.claimShare){
      // Show app link and update state
      if (updateBalance(10000, 'Chia sẻ ứng dụng')) {
        q.share = true;
  q.claimShare = true;
        addExp(20);
        save(LS.quests, quests);
        showToast("Thành công", "Bạn đã chia sẻ ứng dụng. +10,000 VNĐ", "success");
  // Simulated app link pop-up
        window.open('https://appstore.com/gogo-lite-premium', '_blank');
        renderContent();
  }
    }
  };
  sec.appendChild(card2);
  // Quest 3: Mời bạn bè
  const card3=document.createElement('div'); card3.className='card mt10';
  card3.innerHTML = `
    <div class="row">
        <div><b>Mời bạn bè:</b> ${q.invite ?
  'Hoàn thành' : 'Chưa'}</div>
        <button class="action-btn-quest" id="doInvite">Làm</button>
    </div>`;
  const btn3 = card3.querySelector('#doInvite');
  btn3.disabled = q.claimInvite;
  btn3.onclick = () => {
    if(!q.claimInvite){
      if(updateBalance(10000, 'Mời bạn bè')){
        q.invite = true;
  q.claimInvite = true;
        addExp(25);
        save(LS.quests, quests);
        showToast("Thành công", "Bạn đã mời bạn bè. +10,000 VNĐ", "success");
  // Simulated referral link pop-up
        window.open('https://gogo.vn/referral?id=user12345', '_blank');
        renderContent();
  }
    }
  };
  sec.appendChild(card3);
  // New quest: Daily Check-in
  const card4 = document.createElement('div');
  card4.className = 'card mt10';
  card4.innerHTML = `
    <div class="row">
        <div><b>Điểm danh hàng ngày:</b> ${q.checkinToday ?
  'Hoàn thành' : 'Chưa'}</div>
        <button class="action-btn-quest" id="doCheckinDaily">Làm</button>
    </div>
  `;
  const btn4 = card4.querySelector('#doCheckinDaily');
  btn4.disabled = q.checkinToday;
  btn4.onclick = () => {
    if (q.checkinToday) {
        showToast("Thông báo", "Bạn đã hoàn thành nhiệm vụ này rồi.", "info");
  return;
    }
    const today = new Date().getDay() + 1;
    ensureCheckinWeek();
  if (checkin.days.includes(today)) {
        if (updateBalance(20000, "Hoàn thành nhiệm vụ điểm danh")) {
            q.checkinToday = true;
  addExp(15);
            save(LS.quests, quests);
            renderContent();
        }
    } else {
        showToast("Hướng dẫn", "Hãy đến mục 'Điểm danh' để hoàn thành nhiệm vụ.", "info");
  }
  };
  sec.appendChild(card4);

  // New quest: Spin the Wheel
  const card5 = document.createElement('div');
  card5.className = 'card mt10';
  card5.innerHTML = `
    <div class="row">
        <div><b>Quay Vòng quay may mắn:</b> ${q.spinToday ?
  'Hoàn thành' : 'Chưa'}</div>
        <button class="action-btn-quest" id="doSpin">Làm</button>
    </div>
  `;
  const btn5 = card5.querySelector('#doSpin');
  btn5.disabled = q.spinToday;
  btn5.onclick = () => {
    if (q.spinToday) {
        showToast("Thông báo", "Bạn đã hoàn thành nhiệm vụ này rồi.", "info");
  return;
    }
    showToast("Hướng dẫn", "Hãy đến mục Mini game > Vòng quay để hoàn thành nhiệm vụ.", "info");
  };
  sec.appendChild(card5);
  
  c.appendChild(sec);
}
function renderQuestWeekly(c){
  ensureCheckinWeek();
  let vid=0; Object.values(quests).forEach(q=> vid += (q.video||0));
  const sec=document.createElement('div'); sec.className='section';
  const canClaim = (vid>=10) && (checkin.days && checkin.days.length>=7);
  sec.innerHTML = `
    <div class="title">📦 Nhiệm vụ tuần (Thưởng lớn)</div>
    <div class="card">🎬 Video: ${Math.min(vid,10)}/10
      <div class="progress mt8"><div style="width:${Math.min(Math.round((vid/10)*100),100)}%"></div></div>
    </div>
    <div class="card mt8">📅 Điểm danh: ${checkin.days?checkin.days.length:0}/7
      <div class="progress mt8"><div style="width:${Math.min(Math.round(((checkin.days?checkin.days.length:0)/7)*100),100)}%"></div></div>
    </div>
  `;
  const btn=document.createElement('button'); btn.className='btn mt10'; btn.style.width='100%'; btn.textContent='Nhận +300,000 VNĐ';
  btn.disabled = !canClaim;
  btn.onclick=()=>{
    if(!canClaim) return;
  updateBalance(300000,'Thưởng nhiệm vụ tuần'); addExp(200); showToast('Chúc mừng','Bạn đã nhận 300,000 VNĐ','success');
    btn.disabled=true;
  };
  sec.appendChild(btn);
  c.appendChild(sec);
  }

function renderSpin(c){
  const cost = 50000;
  const sec=document.createElement('div');
  sec.className='section';
  sec.innerHTML = `<div class="title">🎰 Vòng quay may mắn</div>
      <div class="card center">Mỗi lượt quay tốn ${fmt(cost)} VNĐ</div>`;
  const wheel = document.createElement('div'); wheel.className='spin-wheel';
  const pointer = document.createElement('div'); pointer.className='spin-pointer';
  wheel.appendChild(pointer);
  sec.appendChild(wheel);

  const btn = document.createElement('button'); btn.className='btn'; btn.style.width='100%'; btn.textContent='Quay ngay';
  btn.onclick = ()=>{
    if (balance < cost) {
      showToast('Không đủ số dư', 'Bạn cần có ít nhất 50,000 VNĐ để quay.', 'error');
  return;
    }
    if (!updateBalance(-cost, 'Phí vòng quay')) {
      showToast('Lỗi', 'Không thể trừ tiền từ số dư.', 'error');
  return;
    }

    btn.disabled = true;
    const deg = 720 + Math.floor(Math.random()*360);
    wheel.style.transition='transform 3s cubic-bezier(.2,.8,.2,1)';
    wheel.style.transform=`rotate(${deg}deg)`;
  setTimeout(()=>{
      btn.disabled=false;
      const prize=["+20,000 VNĐ","+50 EXP","+10,000 VNĐ","Hụt rồi","+30,000 VNĐ","+80 EXP"];
      const idx=Math.floor(((deg%360)/60));
      const reward=prize[(6-idx)%6];
      if(reward.includes("VNĐ")) updateBalance(parseInt(reward.replace(/\D/g,'')),"Vòng quay");
      else if(reward.includes("EXP")) addExp(parseInt(reward.replace(/\D/g,'')));
      showToast("Kết quả", reward, 'success');
      const q = ensureQuestToday();
      q.spinToday = true;
      save(LS.quests, quests);
      renderContent();
    },3100);
  };
  sec.appendChild(btn);
  c.appendChild(sec);
}

function renderLuckyBox(c){
  const cost = 50000;
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML = `<div class="title">🎁 Hộp quà bí ẩn</div>
    <div class="card center">Mỗi lần mở tốn ${fmt(cost)} VNĐ — phần thưởng ngẫu nhiên.</div>`;
  const btn=document.createElement('button'); btn.className='btn'; btn.style.width='100%'; btn.textContent='Mở hộp';
  btn.onclick=()=>{
    if (balance < cost) {
      showToast('Không đủ số dư', 'Bạn cần có ít nhất 50,000 VNĐ để mở hộp.', 'error');
  return;
    }
    if (!updateBalance(-cost, 'Phí mở hộp quà')) {
      showToast('Lỗi', 'Không thể trừ tiền từ số dư.', 'error');
  return;
    }

    const gifts=[10000,20000,50000];
    const val=gifts[Math.floor(Math.random()*gifts.length)];
    updateBalance(val,"Hộp quà bí ẩn"); addExp(30);
  showToast("Bạn nhận được", `+${fmt(val)} VNĐ`, 'success');
  };
  sec.appendChild(btn); c.appendChild(sec);
}

function renderBlueRedGame(c){
    let betAmount = 0;
  let chosenSide = null;
    let timer = 30;
  let countdownInterval = null;
    let gameRunning = false;

    const gameContainer = document.createElement('div');
  gameContainer.className = 'section game-container';
  const renderGame = () => {
        gameContainer.innerHTML = `
            <div class="title">🎲 Xanh Đỏ</div>
            <div id="gameStatus" class="mt8" style="font-size: 14px;"></div>
            ${!gameRunning ?
  `<button class="btn" id="startGameBtn" style="width:100%; margin-top:10px">Bắt đầu chơi</button>` : `
            <div class="timer-display" style="font-size:48px; font-weight: 900">${timer}s</div>
            <div class="bet-input-wrapper">
                <input type="number" id="betAmount" placeholder="Số tiền cược" style="width: 80%; padding: 10px; font-size: 16px;">
            </div>
            <div class="bet-options">
           
                <button class="bet-btn blue" data-side="blue">Đặt Xanh</button>
                <button class="bet-btn red" data-side="red">Đặt Đỏ</button>
            </div>
            `}
            <div class="card mt10">
                <div style="font-weight: bold;">Lịch sử kết quả:</div>
 
            
                <div id="resultHistory" class="result-history mt8"></div>
            </div>
        `;
  if (!gameRunning) {
            gameContainer.querySelector('#startGameBtn').onclick = () => {
                gameRunning = true;
  startCountdown();
            };
        } else {
            const betInput = gameContainer.querySelector('#betAmount');
  betInput.value = betAmount > 0 ? betAmount : '';

            const betButtons = gameContainer.querySelectorAll('.bet-btn');
  betButtons.forEach(btn => {
                if (btn.dataset.side === chosenSide) {
                    btn.style.opacity = '0.5';
                }
                btn.onclick = () => {
                    
                    if (chosenSide) return showToast('Lỗi', 'Bạn đã đặt cược rồi.', 'error');
                    const amount = parseInt(betInput.value) || 0;
                    if (amount <= 0 || amount > balance) {
                  
                        showToast('Lỗi', 'Số tiền cược không hợp lệ', 'error');
       
                        return;
                    }
                  
                        
                    if (updateBalance(-amount, `Cược ${fmt(amount)} VNĐ vào ${btn.dataset.side === 'blue' ? 'Xanh' : 'Đỏ'}`)) {
          
                        betAmount = amount;
       
  
                      chosenSide = btn.dataset.side;
                     
                        renderGame();
                    }
       
  
  };
  
  });
  }
        
        const historyDiv = gameContainer.querySelector('#resultHistory');
  blueRed.history.forEach(result => {
            const resultItem = document.createElement('div');
            resultItem.className = `result-item ${result}`;
            historyDiv.appendChild(resultItem);
        });
  };

    const startCountdown = () => {
        timer = 30;
        betAmount = 0;
  chosenSide = null;
        renderGame();
        
        countdownInterval = setInterval(() => {
            timer--;
            const timerDisplay = gameContainer.querySelector('.timer-display');
            if(timerDisplay) timerDisplay.textContent = `${timer}s`;

            if (timer <= 0) {
                clearInterval(countdownInterval);
                endRound();
  
            
            }
        }, 1000);
  };

    const endRound = () => {
        const result = Math.random() > 0.5 ?
  'blue' : 'red';
        blueRed.history.unshift(result);
        if (blueRed.history.length > 10) blueRed.history.pop();
        
        if (chosenSide && chosenSide === result) {
            const winnings = betAmount * 2;
  updateBalance(winnings, `Thắng game Xanh Đỏ (x2)`);
        }
        save(LS.blueRed, blueRed);
        renderGame();
        setTimeout(startCountdown, 5000);
    };
  c.appendChild(gameContainer);
    renderGame();
}

function renderXO(c) {
    const WIN_REWARD = 20000;
    const LOSE_PENALTY = 10000;
  let board = ['', '', '', '', '', '', '', '', ''];
  let currentPlayer = 'X';
    let isGameActive = true;
  const gameContainer = document.createElement('div');
    gameContainer.className = 'section center';
  gameContainer.innerHTML = `
      <div class="title">❌⭕ Trò chơi XO</div>
      <div class="card mt8">
        <p id="gameStatus">Lượt của bạn (X)</p>
      </div>
      <div class="xo-board">
        ${board.map((_, i) => `<div class="xo-cell" data-index="${i}"></div>`).join('')}
      </div>
      <button class="btn mt10" id="resetBtn">Chơi lại</button>
      <div class="card mt10">
        <div class="stats-grid">
 
            <div class="stat">Thắng: <span class="big">${xoState.wins}</span></div>
          <div class="stat">Thua: <span class="big">${xoState.losses}</span></div>
          <div class="stat">Hòa: <span class="big">${xoState.draws}</span></div>
        </div>
      </div>
    `;
  const cells = gameContainer.querySelectorAll('.xo-cell');
    const statusDisplay = gameContainer.querySelector('#gameStatus');
    const resetBtn = gameContainer.querySelector('#resetBtn');
  const winningConditions = [
      [0, 1, 2], [3, 4, 5], [6, 7, 8],
      [0, 3, 6], [1, 4, 7], [2, 5, 8],
      [0, 4, 8], [2, 4, 6]
    ];
  function handleResultValidation() {
        let roundWon = false;
  for (let i = 0; i < winningConditions.length; i++) {
            const winCondition = winningConditions[i];
  let a = board[winCondition[0]];
            let b = board[winCondition[1]];
            let c = board[winCondition[2]];
  if (a === '' || b === '' || c === '') continue;
  if (a === b && b === c) {
                roundWon = true;
  break;
            }
        }

        if (roundWon) {
            statusDisplay.textContent = `Người chơi ${currentPlayer} đã thắng!`;
  isGameActive = false;
            if (currentPlayer === 'X') {
                xoState.wins++;
  updateBalance(WIN_REWARD, "Thắng XO");
            } else {
                xoState.losses++;
  updateBalance(-LOSE_PENALTY, "Thua XO");
  }
            save(LS.xo, xoState);
            renderContent();
            return;
  }

        if (!board.includes('')) {
            statusDisplay.textContent = `Trận đấu hòa!`;
  isGameActive = false;
            xoState.draws++;
            save(LS.xo, xoState);
            renderContent();
            return;
        }

        currentPlayer = currentPlayer === 'X' ?
  'O' : 'X';
        statusDisplay.textContent = `Lượt của ${currentPlayer}`;
    }

    function handleCellClick(clickedCell, clickedCellIndex) {
        if (board[clickedCellIndex] !== '' || !isGameActive) return;
  board[clickedCellIndex] = currentPlayer;
        clickedCell.textContent = currentPlayer;
        clickedCell.classList.add(currentPlayer);
        handleResultValidation();
        if(isGameActive && currentPlayer === 'O') {
            setTimeout(computerTurn, 500);
  }
    }

    function computerTurn() {
        let emptyCells = board.map((cell, i) => cell === '' ? i : null).filter(val => val !== null);
  let bestMove = -1;

        // Try to win
        for(let i of emptyCells) {
            let tempBoard = [...board];
  tempBoard[i] = 'O';
            if(checkWin(tempBoard, 'O')) { bestMove = i; break;
  }
        }

        // Block player from winning
        if(bestMove === -1) {
            for(let i of emptyCells) {
                let tempBoard = [...board];
  tempBoard[i] = 'X';
                if(checkWin(tempBoard, 'X')) { bestMove = i; break;
  }
            }
        }
        
        // Take center or corners
        if(bestMove === -1 && emptyCells.includes(4)) bestMove = 4;
  if(bestMove === -1) {
            const corners = [0, 2, 6, 8];
  const availableCorners = emptyCells.filter(i => corners.includes(i));
            if(availableCorners.length > 0) bestMove = availableCorners[Math.floor(Math.random() * availableCorners.length)];
  }

        // Take any side
        if(bestMove === -1) {
            const sides = [1, 3, 5, 7];
  const availableSides = emptyCells.filter(i => sides.includes(i));
            if(availableSides.length > 0) bestMove = availableSides[Math.floor(Math.random() * availableSides.length)];
  }


        if (bestMove !== -1) {
            handleCellClick(cells[bestMove], bestMove);
  }
    }

    function checkWin(board, player) {
        for (let i = 0; i < winningConditions.length; i++) {
            const [a, b, c] = winningConditions[i];
  if (board[a] === player && board[b] === player && board[c] === player) {
                return true;
  }
        }
        return false;
  }

    cells.forEach((cell, index) => {
        cell.addEventListener('click', () => handleCellClick(cell, index));
    });
  resetBtn.addEventListener('click', () => {
        board = ['', '', '', '', '', '', '', '', ''];
        isGameActive = true;
        currentPlayer = 'X';
        statusDisplay.textContent = `Lượt của bạn (X)`;
        cells.forEach(cell => {
            cell.textContent = '';
            cell.classList.remove('X', 'O');
        });
 
    
    });

    c.appendChild(gameContainer);
}

// NEW: Crypto render function
let currentCryptoPrice = 100;
  let cryptoPriceInterval = null;
function renderCrypto(c) {
    const sec = document.createElement('div');
    sec.className = 'section';
  sec.innerHTML = `
        <div class="title">🚀 Giao dịch tiền ảo</div>
        <div class="card mt8">
            <div class="crypto-chart">
                <div class="chart-price" id="cryptoPrice">${fmt(currentCryptoPrice)} VNĐ</div>
            </div>
            <div class="mt10">
              <div class="row">
   
                <div class="muted">Số dư VNĐ: ${fmt(balance)}</div>
                <div class="muted">Số Coin: ${cryptoState.coinBalance.toFixed(2)} GO</div>
              </div>
              <div class="row mt8">
                <div class="muted">Đã đầu tư: ${fmt(cryptoState.investedVND)} VNĐ</div>
         
                <div class="muted">Giá trị hiện tại: ${fmt(cryptoState.coinBalance * currentCryptoPrice)} VNĐ</div>
              </div>
            </div>
            <input type="number" id="tradeAmount" placeholder="Nhập số lượng Coin" style="width:100%;padding:10px;margin-top:10px;">
            <div class="crypto-actions mt10">
              
   
              <button class="btn buy-btn" id="buyBtn">Mua</button>
          
                <button class="btn sell-btn" id="sellBtn">Bán</button>
            </div>
        </div>
    `;
  c.appendChild(sec);
    
    // Start price simulation
    if (cryptoPriceInterval) clearInterval(cryptoPriceInterval);
  cryptoPriceInterval = setInterval(() => {
        const change = (Math.random() - 0.5) * 5; // Price change between -2.5 and +2.5
        currentCryptoPrice = Math.max(1, currentCryptoPrice + change);
        const priceEl = $('#cryptoPrice');
        if (priceEl) {
            priceEl.textContent = fmt(currentCryptoPrice) + ' VNĐ';
            priceEl.classList.toggle('price-up', change > 0);
        
  
            priceEl.classList.toggle('price-down', change < 0);
        } else {
            clearInterval(cryptoPriceInterval);
        }
    }, 1000);
  $('#buyBtn').onclick = () => {
        const amount = parseFloat($('#tradeAmount').value) || 0;
  const cost = amount * currentCryptoPrice;
        if (amount <= 0) return showToast('Lỗi', 'Số lượng không hợp lệ.', 'error');
  if (balance < cost) return showToast('Lỗi', 'Không đủ VNĐ để mua.', 'error');

        updateBalance(-cost, `Mua ${amount} GO`);
        cryptoState.coinBalance += amount;
  cryptoState.investedVND += cost;
        save(LS.crypto, cryptoState);
        renderContent();
    };

    $('#sellBtn').onclick = () => {
        const amount = parseFloat($('#tradeAmount').value) ||
  0;
        const profit = amount * currentCryptoPrice;
        if (amount <= 0) return showToast('Lỗi', 'Số lượng không hợp lệ.', 'error');
  if (cryptoState.coinBalance < amount) return showToast('Lỗi', 'Không đủ GO để bán.', 'error');

        updateBalance(profit, `Bán ${amount} GO`);
        cryptoState.coinBalance -= amount;
  cryptoState.investedVND -= (amount / cryptoState.coinBalance) * cryptoState.investedVND;
        save(LS.crypto, cryptoState);
        renderContent();
    };
}


function renderShop(c){
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML=`<div class="title">🛍️ Cửa hàng</div>`;
  const grid=document.createElement('div'); grid.className='shop-grid';
  const items=[{id:'c1',name:'Coupon +10k',price:10000},{id:'exp50',name:'EXP +50',price:20000}];
  items.forEach(it=>{
    const el=document.createElement('div'); el.className='item';
    el.innerHTML=`<h4>${it.name}</h4><div class="price">${fmt(it.price)} VNĐ</div>
      <button class="main-btn mt8" style="width:100%">Mua</button>`;
    el.querySelector('button').onclick=()=>{
      if(updateBalance(-it.price,'Mua '+it.name)){ inventory.push(it); save(LS.inventory,inventory); addExp(20); renderContent(); }
      else showToast('Không đủ số dư','Nạp thêm để mua','error');
    };
    grid.appendChild(el);
  });
  sec.appendChild(grid); c.appendChild(sec);
}
function renderInventory(c){
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML=`<div class="title">🎒 Kho đồ</div>`;
  if(inventory.length===0) sec.innerHTML+='<div class="muted">Chưa có vật phẩm</div>';
  else {
    const box=document.createElement('div'); box.className='card';
    box.innerHTML = inventory.map(it=>`• ${it.name}`).join('<br>');
    sec.appendChild(box);
  }
  c.appendChild(sec);
  }

function renderWallet(c){
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML=`<div class="title">💰 Số dư: ${fmt(balance)} VNĐ</div>`;
  if (pendingDeposit) {
    const pendingAlert = document.createElement('div');
    pendingAlert.className = 'pending-deposit-alert';
  pendingAlert.innerHTML = `
      <i class="fa-solid fa-hourglass-half"></i>
      <span class="muted">Giao dịch nạp ${fmt(pendingDeposit.amount)} VNĐ đang chờ xử lý...</span>
    `;
  sec.appendChild(pendingAlert);
  }
  
  const linkBankCard = document.createElement('div');
  linkBankCard.className = 'card mt8 center';
  if (linkedBank) {
      linkBankCard.innerHTML = `
        <div style="font-weight: bold;">Ngân hàng đã liên kết:</div>
        <div class="bank-info mt8">
          <div class="bank-logo">
            ${linkedBank.logo}
          </div>
          <div>
            <div><b>${linkedBank.name}</b></div>
      
     
  <div class="muted">${linkedBank.accountNumber}</div>
          </div>
        </div>
        <button class="btn mt10" id="chgBank">Thay đổi</button>`;
  linkBankCard.querySelector('#chgBank').onclick = showBankLink;
  } else {
    linkBankCard.innerHTML = `<div class="muted">Bạn chưa liên kết ngân hàng.</div>
                               <button class="btn mt10" id="lnkBank">Liên kết ngay</button>`;
  linkBankCard.querySelector('#lnkBank').onclick = showBankLink;
  }
  sec.appendChild(linkBankCard);
  
  // Withdrawal Section
  const withdrawSec = document.createElement('div');
  withdrawSec.className = 'section mt10';
  withdrawSec.innerHTML = `<div class="title">Rút tiền</div>`;
  
  const withdrawForm = document.createElement('div');
  withdrawForm.className = 'card mt8';
  withdrawForm.innerHTML = `<input id="wAmount" type="number" placeholder="Số tiền muốn rút (>= 50,000)" style="width:100%;padding:10px;margin:6px 0;">
                            <button class="withdraw-btn" id="wBtn" style="width:100%">Rút</button>`;
  withdrawForm.querySelector('#wBtn').onclick = () => {
    const { currentVip } = calculateVipLevel();
    if (currentVip < 1) {
        return showToast('Lỗi', 'Bạn cần đạt cấp VIP 1 trở lên để rút tiền.', 'error');
    }
    if (!linkedBank) {
        return showToast('Lỗi', 'Vui lòng liên kết ngân hàng trước khi rút tiền.', 'error');
  }
    
    const amt = parseInt(withdrawForm.querySelector('#wAmount').value) || 0;
  if (amt < 50000) return showToast('Tối thiểu 50k', 'Số tiền rút phải từ 50.000 VNĐ trở lên.', 'error');
  if (balance < amt) return showToast('Không đủ số dư', 'Vui lòng nạp thêm tiền để thực hiện giao dịch.', 'error');
  if (updateBalance(-amt, `Rút tiền về ${linkedBank.name}`)) {
        withdrawHistory.unshift({time: nowVN(), amount: amt, bank: linkedBank.name});
  save(LS.withdraw, withdrawHistory);
        showWithdrawAlert(user.name, amt);
        renderContent();
    }
  };
  withdrawSec.appendChild(withdrawForm);
  
  c.appendChild(sec);
  c.appendChild(withdrawSec);
}

function renderDeposit(c) {
  const sec = document.createElement('div');
  sec.className = 'section';
  sec.innerHTML = `<div class="title">💵 Nạp tiền</div>`;

  const infoCard = document.createElement('div');
  infoCard.className = 'card';
  infoCard.innerHTML = `<div class="muted">Nạp tiền vào ví của bạn. Vui lòng nhập số tiền muốn nạp để lấy thông tin chuyển khoản.</div>`;
  sec.appendChild(infoCard);

  const depositForm = document.createElement('div');
  depositForm.className = 'card mt10';
  depositForm.innerHTML = `
    <input id="dAmount" type="number" placeholder="Số tiền muốn nạp (>= 10,000)" style="width:100%;padding:10px;margin:6px 0;">
    <button class="deposit-btn" id="dBtn" style="width:100%">Tiếp tục</button>`;
  depositForm.querySelector('#dBtn').onclick = () => {
    const amt = parseInt(depositForm.querySelector('#dAmount').value) || 0;
  if (amt < 10000) return showToast('Tối thiểu 10k', 'Số tiền nạp phải từ 10.000 VNĐ trở lên.', 'error');
    showDepositInfo(amt);
  };
  sec.appendChild(depositForm);
  c.appendChild(sec);
}

function showDepositInfo(amount) {
    const overlay = document.createElement('div');
    overlay.className = 'overlay';

    const box = document.createElement('div');
  box.className = 'modal';

    // Simulated bank account information
    const bankInfo = {
        name: 'MB Bank',
        accountHolder: 'DINH ANH CHANG',
        accountNumber: '0394539007',
        transferContent: 'Nạp tiền vào gogo lite',
        qrCode: 'https://cdn.example.com/tcb_qr.png'
    };
  box.innerHTML = `
        <div class="row">
            <h3 style="margin:0; flex:1">Thông tin nạp tiền</h3>
            <button type="button" class="btn secondary" id="closeDeposit">Đóng</button>
        </div>
        <div class="card mt10">
            <div class="bank-info" style="align-items: flex-start;">
                <div>
       
              <div style="font-weight: bold;">Ngân hàng:</div>
                    <div class="mt8">Tên tài khoản:</div>
                    <div class="mt8">Số tài khoản:</div>
                    <div class="mt8">Nội dung chuyển khoản:</div>
             
             <div class="mt8">Số tiền cần nạp:</div>
             
                  </div>
                <div>
                    <div style="font-weight: bold; color: var(--brand);">${bankInfo.name}</div>
            
  <div class="mt8">${bankInfo.accountHolder}</div>
                    <div 
  class="mt8">${bankInfo.accountNumber}</div>
                    <div class="mt8">${bankInfo.transferContent}</div>
                                
              
  <div class="mt8" style="color: var(--brand);
  font-weight: bold;">${fmt(amount)} VNĐ</div>
                </div>
            </div>
            <div class="center mt10">
   
              <p class="muted" style="font-size: 11px;">Vui lòng 
  chuyển khoản đúng số tiền và nội dung để được cộng tự động.</p>
            </div>
  
  
     
      </div>
        <button class="deposit-btn mt10" style="width: 100%" id="confirmDeposit">Đã chuyển khoản</button>
    `;
  box.querySelector('#closeDeposit').onclick = () => overlay.remove();

    box.querySelector('#confirmDeposit').onclick = () => {
        // Here we simulate the deposit after user confirms
        pendingDeposit = { amount: amount, time: nowVN() };
        save(LS.pendingDeposit, pendingDeposit);
        showToast('Đang xử lý', `Giao dịch nạp ${fmt(amount)} 
  VNĐ đang chờ xử lý...`, 'info');
        overlay.remove();
        renderContent();
    };

  
  overlay.appendChild(box);
    document.body.appendChild(overlay);
}

function renderTx(c){
  const sec=document.createElement('div');
  sec.className='section';
  sec.innerHTML=`<div class="title">🧾 Giao dịch gần đây</div>`;
  const tbl=document.createElement('table'); tbl.className='table';
  tbl.innerHTML='<thead><tr><th>Thời gian</th><th>Lý do</th><th>Số tiền</th></tr></thead><tbody></tbody>';
  const tb=tbl.querySelector('tbody');
  transactions.slice(0,10).forEach(tx=>{
    const tr=document.createElement('tr');
    tr.innerHTML=`<td>${tx.time}</td><td>${tx.reason}</td><td>${tx.amount>0?'+':''}${fmt(tx.amount)}</td>`;
    tb.appendChild(tr);
  });
  sec.appendChild(tbl); c.appendChild(sec);
  }
function renderWithdrawHistory(c){
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML=`<div class="title">🏦 Lịch sử rút</div>`;
  const tbl=document.createElement('table'); tbl.className='table';
  tbl.innerHTML='<thead><tr><th>Thời gian</th><th>Ngân hàng</th><th>Số tiền</th></tr></thead><tbody></tbody>';
  const tb=tbl.querySelector('tbody');
  withdrawHistory.slice(0,10).forEach(w=>{
    const tr=document.createElement('tr'); 
    tr.innerHTML=`<td>${w.time}</td><td>${w.bank || 'Chưa liên kết'}</td><td>${fmt(w.amount)} VNĐ</td>`; 
    tb.appendChild(tr);
  });
  sec.appendChild(tbl); c.appendChild(sec);
}

function renderProfile(c){
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML=`<div class="title">👤 Hồ sơ</div>`;
  const card=document.createElement('div'); card.className='card';
  card.innerHTML = `
    <div><b>Avatar:</b> <span id="avatarShow" style="font-size:22px">${user.avatar||'🟡'}</span></div>
    <div class="mt8"><input id="nameInp" value="${user.name}" style="width:100%;padding:8px" placeholder="Tên hiển thị"></div>
    <div class="mt8"><input id="avatarInp" value="${user.avatar||'🟡'}" style="width:100%;padding:8px" placeholder="Emoji avatar (vd: 🟡, 😺)"></div>
    <button class="main-btn mt8" style="width:100%" id="saveProfile">Lưu</button>`;
  card.querySelector('#saveProfile').onclick=()=>{
    user.name=$('#nameInp').value.trim()||'Khách';
    user.avatar=$('#avatarInp').value.trim()||'🟡';
    save(LS.user,user); renderHeader(); renderContent();
  };
  sec.appendChild(card); c.appendChild(sec);
  }
function renderRedeem(c){
  const validCodes = [
    "JFHF7J", "X45VQQ", "HHB76Z", "WD1GSV1P", "DRJ3IER", "R36CLS", "EEXNQVO0", "KEHRSJ", "UBE24T7L", "ZLJUAUC",
    "4V807QSG", "777GTE", "L39I8C4J", "ULLDKLTP", "9BEAROK5", "YQ0ZRL", "CXAPTV", "B14KSXAB", "W90KZA", "66I9WI8",
    "PFV4VG", "OHA57R2", "4OX7GVV8", "JNSJ4Z2Z", "BIOSVATI", "ENN7VG", "527Q612W", "3PFFOC", "E4BK5MW", "OBZNWC",
    "EV0X4FQ", "EU4OFEEV", "SOY364", "H6Z934", "1A6P3KJZ", "ACBCBPN", "C19A60T", "7C8HIEF6", "9LVEKX0", "F96TGP",
    "JS0P8GG", "MPW5AJH", "0KPAOEHT", "9TGHHO4", "E021S0LB", "6K7NNW9V", "GFXS2N", "HM99A8F", "3CCS5PM", "Y5XMXE6",
    "FWK6BSE", "GXKXU247", "FHF9Z2", "RH3IW4", "Z9083SWA", "TKY27NE", "SY818J22", "MX2VSWX", "9Z1N65", "8G377PG",
    "VOLXJIFB", "3ZMCE8", "8RVUYQ", "MIBD5GQ", "QTVZL2", "A0QY7JQ", "J2R1FN", "0HVNGL", "I4BZES4", "Y22VG0",
   
  "3VMPTHM", "XXPXAZ", "V22KDR", "37X8E0D", "7W2R8J", "OIQCKVQ", "1K3FEJ", "7G5BMA8", "CZY41J0", "2Y49IVQ",
    "0WBIVH", "MJU40L", "SZJD7OL", "VCP3WO", "KQF92I", "X3A0KUL", "S7JQTV", "L89JGOT", "H7K2U5", "8T0AKW",
    "D7Z6P2", "UM05H1", "4VYOCF", "6I92G5", "LPOB7I", "YN6Z0U"
  ];
  const sec = document.createElement('div');
  sec.className = 'section';
  sec.innerHTML = `<div class="title">🔑 Nhập mã</div>`;
  const input = document.createElement('input');
  input.placeholder = "Nhập mã bất kỳ để nhận thưởng";
  input.style.cssText = "width:100%;padding:10px";
  const btn = document.createElement('button');
  btn.className = 'main-btn mt8';
  btn.style.width = '100%';
  btn.textContent = 'Nhận';

  btn.onclick = () => {
    const code = input.value.trim().toUpperCase();
  // Check if the code has already been used
    if (codes[code]) {
      return showToast('Mã đã dùng rồi', '', 'error');
  }

    // Check if the code is in the list of valid codes
    if (!validCodes.includes(code)) {
      return showToast('Mã không hợp lệ', 'Vui lòng kiểm tra lại mã', 'error');
  }

    // If the code is valid and not used, proceed with the reward
    codes[code] = true;
  save(LS.codes, codes);
    const randomReward = Math.floor(Math.random() * (50000 - 10000 + 1)) + 10000;
    updateBalance(randomReward, 'Nhập mã ' + code);
  addExp(50);
    renderContent();
  };

  sec.appendChild(input);
  sec.appendChild(btn);
  c.appendChild(sec);
}
function renderLeaderboard(c){
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML=`<div class="title">🏆 Bảng xếp hạng</div>`;
  const me = { name: user.name, score: (user.exp || 0) + balance / 1000 };
  const bots = [
    { name: 'Aqua', avatar: '💙', exp: 12000, balance: 2500000 },
    { name: 'Nova', avatar: '✨', exp: 9800, balance: 1900000 },
    { name: 'Milo', avatar: '🐱', exp: 6200, balance: 1300000 },
    { name: 'Luna', avatar: '🌕', exp: 4500, balance: 1050000 },
    { name: 'Leo', avatar: '🦁', exp: 3800, balance: 800000 },
    { name: 'Ivy', avatar: '🌿', exp: 2900, balance: 650000 },
  ];
  const list = [...bots, me];
  list.forEach(p => p.score = (p.exp || 0) + (p.balance / 1000));
  list.sort((a, b) => b.score - a.score);

  const tbl = document.createElement('table');
  tbl.className = 'table';
  tbl.innerHTML = '<thead><tr><th>Hạng</th><th>Tên</th><th>Điểm</th></tr></thead><tbody></tbody>';
  const tb = tbl.querySelector('tbody');
  list.forEach((p, i) => {
    const tr = document.createElement('tr');
    tr.innerHTML = `<td>${i + 1}</td><td>${p.avatar ? p.avatar + ' ' : ''}${p.name}</td><td>${fmt(Math.round(p.score))}</td>`;
    tb.appendChild(tr);
  });
  sec.appendChild(tbl);
  c.appendChild(sec);
}

function weeklyProgress(){
  let vid=0; Object.values(quests).forEach(q=> vid += (q.video||0));
  ensureCheckinWeek();
  const chk = (checkin.days? checkin.days.length : 0);
  return {
    videos: Math.min(vid, 10),
    checkins: Math.min(chk, 7),
    vPct: Math.min(Math.round((vid/10)*100),100),
    cPct: Math.min(Math.round((chk/7)*100),100),
  };
  }

const BANKS = [
  {id:'vcb', name:'Vietcombank', logo:'🏦', accountNumber:''},
  {id:'bidv', name:'BIDV', logo:'💳', accountNumber:''},
  {id:'tcb', name:'Techcombank', logo:'💰', accountNumber:''},
  {id:'mb', name:'MB Bank', logo:'🏦', accountNumber:''},
  {id:'acb', name:'ACB', logo:'💳', accountNumber:''}
];
  function showBankLink(){
  const overlay=document.createElement('div'); overlay.className='overlay';
  const box=document.createElement('div'); box.className='modal';
  
  const form = document.createElement('form');
  form.innerHTML = `
    <div class="row">
      <b>🏦 Liên kết ngân hàng</b>
      <button type="button" class="btn secondary" id="closeB">Đóng</button>
    </div>
    <div class="bank-list mt10">
      ${BANKS.map(b => `
        <div class="bank-item" data-bank-id="${b.id}">
          <div class="bank-logo">💰</div>
          <div><b>${b.name}</b></div>
        </div>`).join('')}
    </div>
    <input type="text" id="accountNumberInput" placeholder="Nhập số tài khoản" style="width:100%;padding:10px;margin-top:10px;font-size:16px;">
 
    <button type="submit" class="btn mt10" style="width:100%">Lưu</button>
  `;
  
  let selectedBank = null;
  form.querySelectorAll('.bank-item').forEach(item => {
    item.onclick = () => {
      $$('.bank-item').forEach(el => el.classList.remove('selected'));
      item.classList.add('selected');
      selectedBank = BANKS.find(b => b.id === item.dataset.bankId);
    };
  });
  form.onsubmit = (e) => {
    e.preventDefault();
    if (!selectedBank) {
      return showToast('Lỗi', 'Vui lòng chọn một ngân hàng.', 'error');
  }
    const accountNumber = $('#accountNumberInput').value.trim();
    if (!accountNumber) {
      return showToast('Lỗi', 'Vui lòng nhập số tài khoản.', 'error');
  }

    linkedBank = {
      id: selectedBank.id,
      name: selectedBank.name,
      logo: selectedBank.logo,
      accountNumber: accountNumber
    };
  save(LS.bank, linkedBank);
    overlay.remove();
    showToast("Liên kết thành công", "Đã liên kết "+linkedBank.name, "success");
    renderContent();
  };

  box.appendChild(form);
  overlay.appendChild(box);
  document.body.appendChild(overlay);
  box.querySelector('#closeB').onclick=()=>overlay.remove();
  }

function renderFriends(c){
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML = `<div class="title">👥 Bạn bè</div>`;
  const friends = [
    {name:'Aqua', avatar:'💙', exp:1500, balance:220000},
    {name:'Nova', avatar:'✨', exp: 980, balance:150000},
    {name:'Milo', avatar:'🐱', exp: 620, balance: 90000},
  ];
  friends.forEach(f=>{
    const row=document.createElement('div'); row.className='friend mt8';
    row.innerHTML = `
      <div class="avatar">${f.avatar}</div>
      <div style="flex:1">
        <div class="row"><b>${f.name}</b><span class="muted">EXP ${fmt(f.exp)}</span></div>
        <div class="progress mt8"><div style="width:${Math.min((f.exp%1000)/10,100)}%"></div></div>
        <div class="muted mt8">Số dư: ${fmt(f.balance)} VNĐ</div>
      </div>
      <button class="btn secondary sendTip">Tặng 5k</button>`;
    row.querySelector('.sendTip').onclick=()=>{
      if(updateBalance(-5000, `Tặng ${f.name}`)) showToast('Đã tặng', `Bạn tặng ${f.name} 5,000 VNĐ`, 'success');
  
    };
    sec.appendChild(row);
  });
  c.appendChild(sec);
  }

const SHOP_ITEMS = [
  {id:'exp50', name:'EXP +50', price:20000, type:'EXP', desc:'Tăng ngay 50 EXP.'},
  {id:'exp200', name:'EXP +200', price:70000, type:'EXP', desc:'Tăng 200 EXP để lên cấp nhanh.'},
  {id:'c10', name:'Coupon +10k', price:10000, type:'Coupon', desc:'Thẻ cộng 10,000 VNĐ vào ví.'},
  {id:'c30', name:'Coupon +30k', price:28000, type:'Coupon', desc:'Thẻ cộng 30,000 VNĐ vào ví.'},
  {id:'boost', name:'EXP Boost x2 (24h)', price:120000, type:'Boost', desc:'Nhân đôi EXP trong 24 giờ (demo).'},
];
  let shopFilter = 'all';

function showItemDetail(it){
  const overlay=document.createElement('div'); overlay.className='overlay';
  const box=document.createElement('div'); box.className='modal';
  box.innerHTML = `
    <div class="row"><b>${it.name}</b><button class="btn secondary" id="cls">Đóng</button></div>
    <div class="muted mt8">${it.desc}</div>
    <div class="row mt10"><div><b>Giá:</b> ${fmt(it.price)} VNĐ</div><button class="btn" id="buy">Mua ngay</button></div>`;
  overlay.appendChild(box); document.body.appendChild(overlay);
  box.querySelector('#cls').onclick=()=>overlay.remove();
  box.querySelector('#buy').onclick=()=>{
    if(updateBalance(-it.price, 'Mua '+it.name)){
      inventory.push(it); save(LS.inventory, inventory); addExp(20);
      overlay.remove();
  showToast('Đã mua', it.name, 'success'); renderContent();
    }else{
      showToast('Không đủ số dư','Nạp thêm để mua','error');
  }
  };
}

const _oldShop = renderShop;
renderShop = function(c){
  const sec=document.createElement('div'); sec.className='section';
  sec.innerHTML = `<div class="title">🛍️ Cửa hàng</div>`;
  const filter=document.createElement('div'); filter.className='row';
  filter.innerHTML = `
    <div class="chip">Lọc:</div>
    <button class="btn secondary" data-ft="all">Tất cả</button>
    <button class="btn secondary" data-ft="EXP">EXP</button>
    <button class="btn secondary" data-ft="Coupon">Coupon</button>
    <button class="btn secondary" data-ft="Boost">Boost</button>
  `;
  filter.querySelectorAll('button[data-ft]').forEach(b=>{
    b.onclick=()=>{ shopFilter=b.getAttribute('data-ft'); renderContent(); };
  });
  sec.appendChild(filter);
  const grid=document.createElement('div'); grid.className='shop-grid mt10';
  SHOP_ITEMS.filter(it=> shopFilter==='all' || it.type===shopFilter).forEach(it=>{
    const el=document.createElement('div'); el.className='item';
    el.innerHTML = `
      <h4>${it.name}</h4>
      <div class="muted">${it.type}</div>
      <div class="row mt8">
        <div class="price">${fmt(it.price)} VNĐ</div>
        <button class="btn secondary">Chi tiết</button>
      </div>`;
    el.querySelector('button').onclick=()=>showItemDetail(it);
    grid.appendChild(el);
  });
  if(!grid.children.length){
    const none=document.createElement('div'); none.className='card'; none.textContent='Không có sản phẩm.';
    sec.appendChild(none);
  }else{
    sec.appendChild(grid);
  }
  c.appendChild(sec);
  };

let notifications = [
  {title:"🎁 Khuyến mãi", msg:"Nhập mã EVENT2025 nhận ngay 25,000 VNĐ"},
  {title:"🔥 Nhiệm vụ tuần", msg:"Xem đủ 10 video & điểm danh 7 ngày để nhận +300k"},
  {title:"🛍️ Shop", msg:"Mở bán gói EXP Boost mới"}
];
  function showNotifications(){
  const overlay=document.createElement('div'); overlay.className='overlay';
  const box=document.createElement('div'); box.className='modal';
  box.innerHTML = `<div class="row"><b>🔔 Thông báo</b><button class="btn secondary" id="closeN">Đóng</button></div>`;
  notifications.forEach(n=>{
    const card=document.createElement('div'); card.className='card';
    card.innerHTML = `<div><b>${n.title}</b></div><div class="muted">${n.msg}</div>`;
    box.appendChild(card);
  });
  overlay.appendChild(box); document.body.appendChild(overlay);
  box.querySelector('#closeN').onclick=()=>overlay.remove();
}

const _oldHeader = renderHeader;
let _bellMounted = false;
renderHeader = function(){
  _oldHeader();
  if(!_bellMounted){
    const bell = document.createElement('button');
    bell.className='btn secondary';
    bell.style.marginLeft='8px';
    bell.innerHTML='🔔';
    bell.onclick=showNotifications;
    document.querySelector('.brand').appendChild(bell);
    _bellMounted = true;
  }
};
  /* ===== NEW CHATBOT JAVASCRIPT ===== */
document.addEventListener('DOMContentLoaded', () => {
    const chatButton = $('#chatButton');
    const chatWindow = $('#chatWindow');
    const closeChat = $('#closeChat');
    const chatMessages = $('#chatMessages');
    const chatInput = $('#chatInput');
    const sendChat = $('#sendChat');

    chatButton.addEventListener('click', () => {
        chatWindow.classList.toggle('open');
        chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    closeChat.addEventListener('click', () => {
        chatWindow.classList.remove('open');
    });

 
    function addMessage(text, isUser = false) {
        const msgDiv = document.createElement('div');
        msgDiv.className = `message ${isUser ? 'user' : 'bot'}`;
        msgDiv.textContent = text;
        chatMessages.appendChild(msgDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function getBotResponse(message) {
        const msg = message.toLowerCase().trim();
  if (msg.includes('chào') || msg.includes('hello')) {
            return "Xin chào! Bạn cần hỗ trợ gì?";
  }
        if (msg.includes('rút tiền') || msg.includes('rút')) {
            return "Để rút tiền, bạn hãy vào mục Ví & Lịch sử > Lịch sử rút. Số tiền tối thiểu là 50,000 VNĐ.";
  }
        if (msg.includes('nạp tiền') || msg.includes('nạp')) {
            return "Bạn có thể nạp tiền tại mục Ví & Lịch sử > Nạp tiền. Số tiền tối thiểu là 10,000 VNĐ.";
  }
        if (msg.includes('nhiệm vụ') || msg.includes('daily')) {
            return "Nhiệm vụ hàng ngày giúp bạn kiếm tiền và EXP. Hãy vào mục Nhiệm vụ để xem chi tiết nhé!";
  }
        if (msg.includes('điểm danh') || msg.includes('diem danh')) {
            return "Bạn có thể điểm danh mỗi ngày để nhận tiền thưởng. Vào mục Điểm danh để thực hiện.";
  }
        if (msg.includes('liên hệ')) {
            return "Nếu bạn cần hỗ trợ thêm, vui lòng liên hệ Zalo: ********** hoặc Email: **gogo@support.com**.";
  }
        
        return "Tôi chưa hiểu ý bạn. Bạn có thể hỏi về rút/nạp tiền, nhiệm vụ hoặc điểm danh.";
  }

    function sendMessage() {
        const text = chatInput.value.trim();
  if (text === '') return;
        
        addMessage(text, true);
        chatInput.value = '';
  setTimeout(() => {
            const botResponse = getBotResponse(text);
            addMessage(botResponse, false);
        }, 500);
  }

    sendChat.addEventListener('click', sendMessage);
    chatInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
  // Initial bot message
    setTimeout(() => {
        addMessage("Xin chào! Tôi là GGL Chatbot. Tôi có thể hỗ trợ gì cho bạn?");
    }, 1000);
  /* ===== DRAGGABLE CHAT BUBBLE ===== */
    const chatBubble = $('.chat-bubble');
    let isDragging = false;
  let offsetX, offsetY;

    chatBubble.addEventListener('mousedown', (e) => {
        isDragging = true;
        chatBubble.classList.add('dragging');
        offsetX = e.clientX - chatBubble.getBoundingClientRect().left;
        offsetY = e.clientY - chatBubble.getBoundingClientRect().top;
    });
  document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        chatBubble.style.left = e.clientX - offsetX + 'px';
        chatBubble.style.top = e.clientY - offsetY + 'px';
    });
  document.addEventListener('mouseup', () => {
        if (!isDragging) return;
        isDragging = false;
        chatBubble.classList.remove('dragging');
    });
  // Prevent text selection while dragging
    chatBubble.addEventListener('selectstart', (e) => {
        e.preventDefault();
    });
  });

/* ====== Init load ====== */
renderHeader();
renderMainMenu();
renderSubTabs();
renderContent();
</script>
</body>
</html>
